--before 12c to create any id that should be auto generated
CREATE SEQUENCE idgen_seq
  START WITH 1   -- Start with 1
  INCREMENT BY 1 -- Increment by 1 for each new row
  NOCACHE;       -- Optional: Don't cache values for sequential order
/
create table idgen(id number ,name varchar2(10))

/
CREATE OR REPLACE TRIGGER my_table_before_insert
BEFORE INSERT ON idgen
FOR EACH ROW
BEGIN
  -- Assign the next value from the sequence to the ID column before inserting the row
  :NEW.id := idgen_seq.NEXTVAL;
END;
/

insert into idgen (name) values('Deepak')
select * from idgen
===========================
To put comment on any table
--comment on table entries is 'Its store personal details'
SELECT table_name, comments 
FROM user_tab_comments 
WHERE table_name = 'ENTRIES';
================
--To check from hard code values which values is not insert from list or excel in that table
create table tabAA  (id number)
insert into tabaa values(10)
select * from tabaa
/
SELECT column_value AS hardcoded_value
FROM TABLE(SYS.ODCINUMBERLIST(2, 4, 6, 8, 10, 12))
MINUS
SELECT id
FROM tabaa
/
INSERT INTO tabaa (id)
SELECT column_value AS hardcoded_value
FROM TABLE(SYS.ODCINUMBERLIST(2, 4, 6, 8, 10, 12))
MINUS
SELECT id
FROM tabaa;
========================
SELECT value
FROM (SELECT 2 AS value FROM dual
      UNION ALL
      SELECT 4 FROM dual
      UNION ALL
      SELECT 6 FROM dual
      UNION ALL
      SELECT 8 FROM dual
      UNION ALL
      SELECT 10 FROM dual
      UNION ALL
      SELECT 12 FROM dual
      union all
      SELECT 16 FROM dual) hardcoded_values
WHERE value NOT IN (SELECT id FROM tabaa);
====================================
Create auomated job in sql using procedure
create table etl_job as select * from ereg where 1=2
select * from etl_job
/
create or replace procedure etl_trn_jobs
as
begin
insert into etl_job (ename,empno,job,sal)
select ename,empno,job,sal+5000 from ereg  

commit;
DBMS_OUTPUT.PUT_LINE('ETL process completed successfully!');
END etl_trn_jobs;
/
BEGIN
   DBMS_SCHEDULER.create_job (
      job_name        => 'etl_five_minute_job',
      job_type        => 'PLSQL_BLOCK',
      job_action      => 'BEGIN etl_trn_jobs; END;',
      start_date      => SYSTIMESTAMP,  -- Start immediately
      repeat_interval => 'FREQ=MINUTELY; INTERVAL=5',  -- Repeat every 5 minutes
      enabled         => TRUE
   );
END;
/
GRANT CREATE JOB TO IMMS;

/
SELECT job_name, status, log_date, additional_info 
FROM dba_scheduler_job_log
WHERE job_name = 'etl_five_minute_job';
/
select * from etl_job
select * from ereg where sal>
/
SELECT job_name, enabled
FROM dba_scheduler_jobs
WHERE job_name = 'ETL_FIVE_MINUTE_JOB';
/
SELECT job_name, status, error#, actual_start_date, log_date
FROM dba_scheduler_job_run_details
WHERE job_name = 'ETL_FIVE_MINUTE_JOB';
/
--To drop job
BEGIN
   DBMS_SCHEDULER.drop_job('etl_five_minute_job');
END;
/




 

